{
  "version": 3,
  "sources": ["../../../contentlayer.config.js", "../../../src/configuration.ts"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from 'contentlayer/source-files';\nimport rehypeSlug from 'rehype-slug';\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings';\nimport configuration from './src/configuration';\n\nconst siteUrl = configuration.site.siteUrl;\n\nexport const Post = defineDocumentType(() => ({\n  name: 'Post',\n  filePathPattern: `posts/*.mdx`,\n  contentType: 'mdx',\n  fields: {\n    title: {\n      type: 'string',\n      description: 'The title of the post',\n      required: true,\n    },\n    date: {\n      type: 'date',\n      description: 'The date of the post',\n      required: true,\n    },\n    live: {\n      type: 'boolean',\n      description: 'Whether the post is live or not',\n      required: true,\n      default: false,\n    },\n    image: {\n      type: 'string',\n      description: 'The path to the cover image',\n    },\n    description: {\n      type: 'string',\n      description: 'The description of the post',\n    },\n  },\n  computedFields: {\n    url: {\n      type: 'string',\n      resolve: (post) => `/blog/${getSlug(post._raw.sourceFileName)}`,\n    },\n    readingTime: {\n      type: 'number',\n      resolve: (post) => calculateReadingTime(post.body.raw),\n    },\n    slug: {\n      type: 'string',\n      resolve: (post) => getSlug(post._raw.sourceFileName),\n    },\n    structuredData: {\n      type: 'object',\n      resolve: (doc) => ({\n        '@context': 'https://schema.org',\n        '@type': 'BlogPosting',\n        headline: doc.title,\n        datePublished: doc.date,\n        dateModified: doc.date,\n        description: doc.description,\n        image: [siteUrl, doc.image].join(''),\n        url: [siteUrl, 'blog', doc._raw.flattenedPath].join('/'),\n        author: {\n          '@type': 'Organization',\n          name: configuration.site.name,\n        },\n      }),\n    },\n  },\n}));\n\nexport default makeSource({\n  contentDirPath: 'src/content',\n  documentTypes: [Post],\n  mdx: {\n    remarkPlugins: [],\n    rehypePlugins: [\n      rehypeSlug,\n      [\n        rehypeAutolinkHeadings,\n        {\n          properties: {\n            className: ['anchor'],\n          },\n        },\n      ],\n    ],\n  },\n});\n\nfunction calculateReadingTime(content) {\n  const wordsPerMinute = 235;\n  const numberOfWords = content.split(/\\s/g).length;\n  const minutes = numberOfWords / wordsPerMinute;\n\n  return Math.ceil(minutes);\n}\n\nfunction getSlug(fileName) {\n  return fileName.replace('.mdx', '');\n}\n", "import type { Provider } from '@supabase/gotrue-js/src/lib/types';\n\nconst production = process.env.NODE_ENV === 'production';\n\nconst configuration = {\n  site: {\n    name: 'RVRENTPRO',\n    description: 'Rent Pro - Our Software',\n    themeColor: '#ffffff',\n    themeColorDark: '#0a0a0a',\n    siteUrl: process.env.NEXT_PUBLIC_SITE_URL,\n    siteName: 'RVRENTPRO',\n    twitterHandle: '',\n    githubHandle: '',\n    language: 'en',\n    convertKitFormId: '',\n    locale: process.env.NEXT_PUBLIC_DEFAULT_LOCALE,\n  },\n  auth: {\n    // ensure this is the same as your Supabase project. By default - it's true\n    requireEmailConfirmation:\n      process.env.NEXT_PUBLIC_REQUIRE_EMAIL_CONFIRMATION === 'true',\n    // NB: Enable the providers below in the Supabase Console\n    // in your production project\n    providers: {\n      emailPassword: true,\n      phoneNumber: false,\n      emailLink: false,\n      oAuth: ['google'] as Provider[],\n    },\n  },\n  production,\n  environment: process.env.NEXT_PUBLIC_ENVIRONMENT,\n  enableThemeSwitcher: true,\n  paths: {\n    signIn: '/auth/sign-in',\n    signUp: '/auth/sign-up',\n    signInMfa: '/auth/verify',\n    onboarding: `/onboarding`,\n    appPrefix: '/dashboard',\n    appHome: '/dashboard',\n    authCallback: '/auth/callback',\n    settings: {\n      profile: 'settings/profile',\n      authentication: 'settings/profile/authentication',\n      email: 'settings/profile/email',\n      password: 'settings/profile/password',\n    },\n  },\n  email: {\n    host: '',\n    port: 587,\n    user: '',\n    password: '',\n    senderAddress: 'RVRentPro Team <info@rentpro.dev>',\n  },\n  sentry: {\n    dsn: process.env.NEXT_PUBLIC_SENTRY_DSN,\n  },\n  stripe: {\n    products: [\n      {\n        name: 'Basic',\n        description: 'Description of your Basic plan',\n        badge: `Up to 20 users`,\n        features: [\n          'Basic Reporting',\n          'Up to 20 users',\n          '1GB for each user',\n          'Chat Support',\n        ],\n        plans: [\n          {\n            name: 'Monthly',\n            price: '$9',\n            stripePriceId: 'price_1LfXGaI1i3VnbZTq7l3VgZNa',\n          },\n          {\n            name: 'Yearly',\n            price: '$90',\n            stripePriceId: 'basic-plan-yr',\n          },\n        ],\n      },\n      {\n        name: 'Pro',\n        badge: `Most Popular`,\n        recommended: true,\n        description: 'Description of your Pro plan',\n        features: [\n          'Advanced Reporting',\n          'Up to 50 users',\n          '5GB for each user',\n          'Chat and Phone Support',\n        ],\n        plans: [\n          {\n            name: 'Monthly',\n            price: '$29',\n            stripePriceId: 'pro-plan-mth',\n          },\n          {\n            name: 'Yearly',\n            price: '$200',\n            stripePriceId: 'pro-plan-yr',\n          },\n        ],\n      },\n      {\n        name: 'Premium',\n        description: 'Description of your Premium plan',\n        badge: ``,\n        features: [\n          'Advanced Reporting',\n          'Unlimited users',\n          '50GB for each user',\n          'Account Manager',\n        ],\n        plans: [\n          {\n            name: '',\n            price: 'Contact us',\n            stripePriceId: '',\n            label: `Contact us`,\n            href: `/contact`,\n          },\n        ],\n      },\n    ],\n  },\n};\n\nexport default configuration;\n"],
  "mappings": "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",
  "names": []
}
